{"version":3,"sources":["pythonCode.js","components/MatrixMultiplication.js","App.js","reportWebVitals.js","index.js"],"names":["dotProductExerciseCode","maxNumberOfColumns","maxNumberOfRows","pyodide","a","code","runPythonAsync","results","m","globals","get","n","p","A","toJs","map","x","Array","from","B","C","MatrixMultiplication","props","generateExercise","state","generateDotProductExercise","then","result","console","log","catch","error","handleSubmit","event","preventDefault","this","classes","Container","maxWidth","Paper","className","paper","onSubmit","TextField","parameter","type","value","label","Button","variant","color","button","Component","withStyles","theme","height","margin","spacing","float","width","App","loadPythonPackages","loadPackage","getPythonVersion","pyodideLoadedHandler","version","setState","isLoaded","window","loadPyodide","indexURL","response","progress","Typography","LinearProgress","position","top","left","transform","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.0c979721.chunk.js","sourcesContent":["export function dotProductExerciseCode(maxNumberOfColumns, maxNumberOfRows) {\n  return `\nimport random\nimport numpy as np\n\nm = random.randint(1, ${maxNumberOfRows})\nn = random.randint(1, ${maxNumberOfColumns})\np = random.randint(1, ${maxNumberOfColumns})\n\nA = np.random.randint(10, size=(m, n))\nB = np.random.randint(10, size=(n, p))\nC = A @ B\n  `\n}\n\nexport async function generateDotProductExercise(pyodide, maxNumberOfRows, maxNumberOfColumns) {\n  const code = dotProductExerciseCode(maxNumberOfRows, maxNumberOfColumns)\n  await pyodide.runPythonAsync(code)\n  const results = {\n    m: pyodide.globals.get('m'),\n    n: pyodide.globals.get('n'),\n    p: pyodide.globals.get('p'),\n    A: pyodide.globals\n      .get('A')\n      .toJs()\n      .map((x) => Array.from(x)),\n    B: pyodide.globals\n      .get('B')\n      .toJs()\n      .map((x) => Array.from(x)),\n    C: pyodide.globals\n      .get('C')\n      .toJs()\n      .map((x) => Array.from(x))\n  }\n  return results\n}\n","import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport Container from '@material-ui/core/Container'\nimport Paper from '@material-ui/core/Paper'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport { generateDotProductExercise } from '../pythonCode'\n\nconst styles = (theme) => ({\n  paper: {\n    height: '100vh'\n  },\n  button: {\n    margin: theme.spacing(1, 1, 0, 0),\n    float: 'right'\n  },\n  parameter: {\n    width: '12ch',\n    margin: theme.spacing(1)\n  }\n})\n\nclass MatrixMultiplication extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      pyodide: props.pyodide,\n      maxNumberOfRows: 4,\n      maxNumberOfColumns: 4\n    }\n  }\n\n  generateExercise = () => {\n    const { maxNumberOfRows, maxNumberOfColumns, pyodide } = this.state\n    generateDotProductExercise(pyodide, maxNumberOfRows, maxNumberOfColumns)\n      .then((result) => {\n        console.log(result)\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    console.log('handleSubmit')\n    this.generateExercise()\n  }\n\n  render() {\n    const { maxNumberOfRows, maxNumberOfColumns } = this.state\n    const { classes } = this.props\n\n    return (\n      <Container maxWidth=\"sm\">\n        <Paper className={classes.paper}>\n          <form onSubmit={this.handleSubmit}>\n            <TextField className={classes.parameter} type=\"number\" value={maxNumberOfRows} label=\"Max Rows\" />\n            <TextField className={classes.parameter} type=\"number\" value={maxNumberOfColumns} label=\"Max Columns\" />\n            <Button type=\"submit\" variant=\"outlined\" color=\"primary\" className={classes.button}>\n              New Exercise\n            </Button>\n          </form>\n        </Paper>\n      </Container>\n    )\n  }\n}\n\nMatrixMultiplication.propTypes = {\n  classes: PropTypes.object,\n  pyodide: PropTypes.object\n}\n\nexport default withStyles(styles)(MatrixMultiplication)\n","import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport Typography from '@material-ui/core/Typography'\nimport MatrixMultiplication from './components/MatrixMultiplication'\n\nconst styles = (theme) => ({\n  progress: {\n    position: 'fixed',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)'\n  }\n})\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isLoaded: false,\n      version: null\n    }\n  }\n\n  initialize\n\n  loadPythonPackages = (pyodide) => {\n    return pyodide.loadPackage(['numpy'])\n  }\n\n  getPythonVersion = (pyodide) => {\n    return pyodide.runPythonAsync(\n      `\nimport sys\nsys.version\n`\n    )\n  }\n\n  pyodideLoadedHandler = (pyodide) => {\n    this.loadPythonPackages(pyodide)\n      .then(() => this.getPythonVersion(pyodide))\n      .then((version) => {\n        this.setState({ isLoaded: true, version, pyodide })\n      })\n  }\n\n  componentDidMount() {\n    window\n      .loadPyodide({ indexURL: 'https://cdn.jsdelivr.net/pyodide/v0.17.0/full/' })\n      .then((response) => {\n        this.pyodideLoadedHandler(response)\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n\n  render() {\n    const { isLoaded, version, pyodide } = this.state\n    const { classes } = this.props\n\n    if (!isLoaded) {\n      return (\n        <div className={classes.progress}>\n          <Typography variant=\"h2\">Loading Python</Typography>\n          <LinearProgress />\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <div>{version}</div>\n        <MatrixMultiplication pyodide={pyodide} />\n      </div>\n    )\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object\n}\n\nexport default withStyles(styles)(App)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <>\n    <CssBaseline />\n    <App />\n  </>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}